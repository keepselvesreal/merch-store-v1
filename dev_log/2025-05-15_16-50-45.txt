=== AuthCheckView 세션 검증 문제 해결 과정 ===

날짜: 2025-05-15 16:50:45

시행착오:
1. 초기 문제:
   - /api/auth/check/ 엔드포인트에서 X-Session-ID 헤더 없이 요청해도 세션이 자동 생성됨
   - 세션 키가 없을 때도 200 OK 응답이 반환됨

2. 첫 시도: 세션 키 검증 추가
   ```python
   session_key = request.headers.get('X-Session-ID') or request.session.session_key
   ```
   - 문제: `request.session`에 접근하는 순간 자동으로 세션이 생성됨
   - 결과: 여전히 세션 키 없이 요청해도 200 OK 응답

3. 두 번째 시도: 헤더 기반 검증
   ```python
   session_key = request.headers.get('X-Session-ID')
   ```
   - 문제: `request.session`에 접근하지 않도록 수정했지만, 다른 곳에서 세션이 생성됨
   - 결과: 여전히 세션 키 없이 요청해도 200 OK 응답

4. 최종 해결:
   - `request.session`에 절대 접근하지 않도록 완전히 제거
   - 오직 `X-Session-ID` 헤더 값만 사용
   - `SessionStore.load()`로 직접 세션 검증
   - 인증된 사용자와 게스트 사용자 구분 로직 분리

결과:
- X-Session-ID 헤더 없이 요청할 때: 401 Unauthorized
- 유효하지 않은 세션 키로 요청할 때: 401 Unauthorized
- 유효한 세션 키로 요청할 때: 200 OK
- 인증된 사용자 요청할 때: 200 OK

학습 포인트:
1. Django 세션의 특성:
   - 뷰에서 `request.session`에 단 한 번이라도 접근하면 자동으로 세션이 생성됨
   - 세션 생성을 방지하려면 `request.session`에 절대 접근하지 않아야 함

2. 세션 검증 방법:
   - `SessionStore.load()`로 직접 세션 데이터를 로드하여 검증
   - 세션 데이터의 `initiated` 플래그를 통해 유효성 검증

3. API 디자인:
   - 헤더를 통한 인증 정보 전달이 더 안전
   - 인증된 사용자와 게스트 사용자 구분 로직 분리
