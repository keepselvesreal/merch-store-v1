Django Model Conflict and Import Issues Resolution Log
Date: 2025-05-15

1. Initial Error:
Error: RuntimeError: Conflicting 'user_groups' models in application 'accounts'
Reason: Inconsistent model loading paths for the 'accounts' app

2. Key Issues Identified:
- Inconsistent app/model import paths across the project
- Incorrect AUTH_USER_MODEL format in settings.py
- Python path modifications causing ambiguous module imports
- Improper AppConfig configurations

3. Resolution Steps:

a) settings.py Modifications:
- Removed sys.path.insert() modification
- Changed AUTH_USER_MODEL from 'apps.accounts.User' to 'accounts.User'
- Added type hints for ALLOWED_HOSTS
- Removed unused imports

b) AppConfig Configurations:
- Ensured each app's AppConfig has correct name and label:
  name = 'apps.app_name'
  label = 'app_label'

c) Import Path Standardization:
- Standardized all inter-app imports to use 'apps.app_name.module' pattern
- Modified imports in:
  - apps/cart/models.py
  - apps/cart/serializers.py
  - apps/cart/views.py
  - Other related files

d) Additional Steps:
- Cleared __pycache__ directories before migration attempts
- Verified all related_name settings in User model

4. Final Successful Commands:
- python manage.py makemigrations
- python manage.py migrate
- python manage.py runserver

5. Key Learning Points:
- Django requires consistent app/model reference paths
- AUTH_USER_MODEL must use app_label.ModelName format
- AppConfig configurations are crucial for app identification
- Clearing __pycache__ can help resolve import issues
- Standardizing import paths across the project is essential

6. Future Prevention:
- Always use consistent import paths (apps.app_name.module)
- Verify AppConfig configurations in new apps
- Avoid modifying sys.path unless absolutely necessary
- Regularly check for unused imports
- Document app structure and import conventions
